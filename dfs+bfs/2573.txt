import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Queue;
import java.util.StringTokenizer;
class Point{
	private int x;
	private int y;
	Point(int x, int y){
		this.x = x;
		this.y = y;
	}
	int getX() {return x;}
	int getY() {return y;}
}
public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		int ice[][] = new int[n][m];
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for(int j = 0; j < m; j++) {
				ice[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		int year = 0;
		while(true) {
			boolean visit[][] = new boolean[n][m];
			int a = 0;
			int b = 0;
			for(int i = 0; i < n; i++) {
				for(int j = 0; j < m; j++) {
					if(ice[i][j] > 0 && !visit[i][j]) {
						bfs(ice,i,j,visit,n,m);
						a++;
					}
					if(ice[i][j] > 0) {
						ocean(ice,visit,i,j,n,m);
						b++;
					}
				}
			}
			if(a >= 2) 
				break;
			if(b == 0) {
				year = 0;
				break;
			}
			year++;
		}
		bw.write(year+"");
		bw.flush();
		bw.close();
	}
	static void bfs(int area[][], int i,int j, boolean visit[][],int n,int m) {
		Queue<Point> q = new LinkedList<>();
		q.add(new Point(i,j));
		int dx[] = {-1,1,0,0};
		int dy[] = {0,0,-1,1};
		int nextx = 0;
		int nexty = 0;
		while(!q.isEmpty()) {
			Point p1 = q.poll();
			visit[p1.getX()][p1.getY()] = true;
			for(int k = 0; k < 4; k++) {
				nextx = p1.getX() + dx[k];
				nexty = p1.getY() + dy[k];
				if(nextx >= 0 && nextx < n && nexty >= 0 && nexty < m) {
					if(area[nextx][nexty] > 0 && !visit[nextx][nexty]) {
						q.add(new Point(nextx,nexty));
						visit[nextx][nexty] = true;
					}
				}
			}
		}
	}
	static void ocean(int area[][],boolean visit[][] ,int i, int j,int n,int m) {
		Point p1 = new Point(i,j);
		int dx[] = {-1,1,0,0};
		int dy[] = {0,0,-1,1};
		int nextx = 0;
		int nexty = 0;
		int melt = 0;
		for(int k = 0; k < 4; k++) {
			nextx = p1.getX() + dx[k];
			nexty = p1.getY() + dy[k];
			if(nextx >= 0 && nextx < n && nexty >= 0 && nexty < m) {
				if(area[nextx][nexty] == 0 && !visit[nextx][nexty])
					melt++;
			}
		}
		area[i][j] = area[i][j] - melt;
		if(area[i][j] < 0)
			area[i][j] = 0;
	}
}

bfs를 통해 푼 문제.
무한반복문 while문을 하나 설정한다.
그 다음에 빙산이 존재하면 그 곳을 시작점으로 bfs함수를 호출할때마다 a++를 해서 빙산이 몇개인지 구한다.
그 다음에 ocean함수를 호출하여 1칸씩 빙산들을 녹인다.
이때 빙산이 두 개이상이거나 빙산이 두 개이상으로 안되서 빙산이 다 녹았을경우 while문을 탈출한다.
마지막으로 두 개이상으로 분리된 최소 년수를 출력한다.