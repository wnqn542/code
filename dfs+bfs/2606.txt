import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		int n = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine(), " ");
		int m = Integer.parseInt(st.nextToken());
		boolean visit[] = new boolean[n+1];
		int cnt = 0;
		LinkedList list[] = new LinkedList[n+1];
		for(int i = 0; i <= n; i++)
			list[i] = new LinkedList<Integer>();
		Queue<Integer> q = new LinkedList<>();
		for(int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int a = Integer.parseInt(st.nextToken());
			int b =Integer.parseInt(st.nextToken());
			list[a].add(b);
			list[b].add(a);
		}
		q.add(1);
		visit[1] = true;
		while(!q.isEmpty()) {
			int com = q.remove();
			ListIterator<Integer> i = list[com].listIterator();
			while(i.hasNext()) {
				int c = i.next();
				if(!visit[c]) {
					q.add(c);
					visit[c] = true;
				}
			}
		}
		for(int i = 1; i <= n; i++) {
			if(i == 1) continue; 
			if(visit[i])
				cnt++;
		}
		bw.write(cnt+"");
		bw.flush();
		bw.close();
	}
}

문제를 제대로 안읽고 1번부터라는 조건을 생각 안하고 했다가 여러번 틀린문제.
bfs를 통하여 1번부터 어디까지 감염되었는지 계산.