import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Queue;
import java.util.StringTokenizer;
public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		int n = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		boolean v[] = new boolean[100001];
		int m[] = new int[100001];
		Queue<Integer> q = new LinkedList<>();
		q.add(n);
		v[n] = true;
		int dx[] = {-1,1,2};
		int nextn = 0;
		while(!v[k]) {
			int num = q.poll();
			for(int i = 0; i < 3; i++) {
				nextn = num + dx[i];
				if(i == 2)
					nextn = num * dx[i];
				if(0 <= nextn && nextn < 100001) {
				if(!v[nextn]) {
					q.add(nextn);
					v[nextn] = true;
					m[nextn] = m[num] + 1;
					}
				}
			}
		}
		bw.write(m[k]+"");
		bw.flush();
		bw.close();
	}
}

방문한곳을 위한 배열과 최소값을 구하기위한 배열을 100000만큼 생성.
dx를 -1,1,2로 설정하여 3번 루프가 돌아가게 설정.
bfs를 통하여 x-1로 이동한 위치, x+1로 이동한 위치, x*2한 위치를 방문.
그리고 그 위치에 +1씩 더해준다.
목표한 곳을 방문하면 while문을 탈출.
그리고 그 위치에 도달하기 위한 최소값을 출력.