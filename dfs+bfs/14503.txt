import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.Math;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
public class Main {
	static int clear = 0;
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine()," ");
		int r = Integer.parseInt(st.nextToken());
		int c = Integer.parseInt(st.nextToken());
		int d = Integer.parseInt(st.nextToken());
		int area[][] = new int[n][m];
		boolean visit[][] = new boolean[n][m];
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine()," ");
			for(int j = 0; j < m; j++) {
				area[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		dfs(area,visit,r,c,d);
		bw.write(clear+"");
		bw.flush();
		bw.close();
	}
	static void dfs(int area[][], boolean visit[][],int r,int c ,int d) {
		int dx[] = {-1,1,0,0};
		int dy[] = {0,0,-1,1};
		if(!visit[r][c] && area[r][c] == 0) {
			visit[r][c] = true;
			clear++;
		}
		boolean check = false;
		int nearx = 0; int neary = 0;int nextx = 0; int nexty = 0;
		for(int i = 0; i < 4; i++) {
			nearx = r + dx[i];
			neary = c + dy[i];
			if(nearx >= 0 && nearx < area.length && neary >= 0 && neary < area[0].length) {
				if(!visit[nearx][neary] && area[nearx][neary] == 0) {
					check = true;
					break;
				}
			}
		}
		if(check) {
			d--;
			if(d < 0)
				d = 3;
			if(d == 0) {
				nextx = r-1;
				nexty = c;
			}
			else if(d == 1) {
				nextx = r;
				nexty = c+1;
			}
			else if(d == 2) {
				nextx = r+1;
				nexty = c;
			}
			else {
				nextx = r;
				nexty = c-1;
			}
			if(nextx >= 0 && nextx < area.length && nexty >= 0 && nexty < area[0].length) {
				if(!visit[nextx][nexty]) {
					if(area[nextx][nexty] == 0)
						dfs(area,visit,nextx,nexty,d);
					else
						dfs(area,visit,r,c,d);
				}
				else if(visit[nextx][nexty]) {
					dfs(area,visit,r,c,d);
				}
			}
		}
		else {
			if(d < 0)
				d = 3;
			if(d == 0) {
				nextx = r+1;
				nexty = c;
			}
			else if(d == 1) {
				nextx = r;
				nexty = c-1;
			}
			else if(d == 2) {
				nextx = r-1;
				nexty = c;
			}
			else {
				nextx = r;
				nexty = c+1;
			}
			if(nextx >= 0 && nextx < area.length && nexty >= 0 && nexty < area[0].length) {
				if(area[nextx][nexty] == 0)
					dfs(area,visit,nextx,nexty,d);
			}
		}
	}
}

dfs를 통해 푼 문제.
현재 칸 주변 4칸을 확인하여 청소되지 않은 칸이 있으면 check를 true로 바꾸고 로봇청소기를 반시계로 돌리고 전진한다.
만약 전진할칸이 청소가 되어있으면 반시계로 한번 더 돌려서 전진한다.
현재 칸 주변의 4칸이 청소되지 않은 빈칸이거나 벽일경우 한 칸 후진하고 아닐경우 청소기를 멈춘다.