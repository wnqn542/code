import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Queue;
import java.util.StringTokenizer;
class Point{
	private int x;
	private int y;
	Point(int x, int y){
		this.x = x;
		this.y = y;
	}
	int getX() {return x;}
	int getY() {return y;}
}
public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		int n = Integer.parseInt(st.nextToken());
		int area[][] = new int[n][n];
		int max = 0;
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for(int j = 0; j < n; j++) {
				area[i][j] = Integer.parseInt(st.nextToken());
				if(area[i][j] > max)
					max = area[i][j];
			}
		}
		int wh = 0;
		int maxarea = 0;
		while(wh != max) {
			boolean visit[][] = new boolean[n][n];
			int a = 0;
			for(int i = 0; i < n; i++) {
				for(int j = 0; j < n; j++) {
					if(area[i][j] > wh && !visit[i][j]) {
						bfs(area,i,j,visit,wh,n);
						a++;
						if(a > maxarea)
							maxarea = a;
					}
				}
			}
			wh++;
		}
		bw.write(maxarea+"");
		bw.flush();
		bw.close();
	}
	static void bfs(int area[][], int i,int j, boolean visit[][],int wh,int n) {
		Queue<Point> q = new LinkedList<>();
		q.add(new Point(i,j));
		int dx[] = {-1,1,0,0};
		int dy[] = {0,0,-1,1};
		int nextx = 0;
		int nexty = 0;
		while(!q.isEmpty()) {
			Point p1 = q.poll();
			visit[p1.getX()][p1.getY()] = true;
			for(int k = 0; k < 4; k++) {
				nextx = p1.getX() + dx[k];
				nexty = p1.getY() + dy[k];
				if(nextx >= 0 && nextx < n && nexty >= 0 && nexty < n) {
					if(area[nextx][nexty] > wh && !visit[nextx][nexty]) {
						q.add(new Point(nextx,nexty));
						visit[nextx][nexty] = true;
					}
				}
			}
		}
	}
}

물의 높이를 1씩 높여가며 푸는 문제.
물의 높이보다 area가 높을경우 bfs함수를 호출하여 안전한 영역을 구하고 bfs가 호출될때마다 a++를 시킨다.
그리고 a가 maxarea보다 클 경우 maxarea를 재설정.
그리고 wh가 영역의 최대높이에 도달할 경우 while문을 탈출.
그리고 maxarea를 출력한다.